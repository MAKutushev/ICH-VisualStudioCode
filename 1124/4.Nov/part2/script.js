// Клиент-серверная модель —
// это архитектурный подход, который описывает
// взаимодействие между двумя типами компьютерных
// программ: клиентами и серверами. Этот подход широко
// используется в современных сетевых приложениях и
// веб-разработке.

// Сервер —
// это компьютер или программное обеспечение, которое
// предоставляет услуги (данные, ресурсы,
// функциональность) другим программам, называемым
// клиентами.

// Клиент —
// это компьютер или программное обеспечение, которое
// использует услуги (данные, ресурсы, функциональность)
// предоставляемые сервером.

// Протоколы —
// это набор правил и соглашений, которые определяют,
// как клиент и сервер должны обмениваться
// информацией.

// Hypertext Transfer Protocol
// HTTP Протокол, используемый для передачи данных в вебе.
// Клиент отправляет запросы на сервер, и сервер возвращает ответы.

// Асинхронное взаимодействие —
// это ситуация, когда клиент и сервер могут продолжать
// свою работу, не блокируя друг друга в ожидании ответа.
// Часто используется в клиент-серверной модели.

// HTTP-запросы —
// веб-браузеры взаимодействуют с веб-серверами
// при помощи протокола передачи гипертекста. Когда
// вы кликаете на ссылку на странице, заполняете
// форму или производите поиск, браузер отправляет
// на сервер HTTP-запрос.

// URL (Uniform Resource Locator)
// Это адрес, который определяет местоположение
// ресурса (например, веб-страницы, файла,
// изображения или другого типа контента) в интернете.
// URL используется для обозначения точного пути к
// ресурсу и позволяет пользователям и программам
// легко находить и получать доступ к этому ресурсу.

// URL (Uniform Resource Locator)
// https://blog.example.com/subtopic/blog-post
// 1. Протокол
// 2. Поддомен
// 3. Домен
// 4. Домен верхнего уровня
// 5. Подкаталог
// 6. Слаг

// Код ответа HTTP —
// показывает, был ли успешно выполнен
// определённый HTTP запрос. Коды сгруппированы в
// 5 классов.

// Классы кодов
// ● Информационные 100 - 199
// ● Успешные 200 - 299
// ● Перенаправления 300 - 399
// ● Клиентские ошибки 400 - 499
// ● Серверные ошибки 500 - 599

// Наиболее распространенные коды статусов
// Коды статусов Пояснение
// Статус-код 200 Стандартный код статуса «OK» для успешного запроса HTTP
// Статус-код 201 Код статуса, который подтверждает, что запрос был успешным и, как следствие, был создан новый ресурс
// Статус-код 204 Код статуса подтверждает, что сервер выполнил запрос, но не нуждается в возврате информации
// Статус-код 304 Код состояния, используемый для кэширования браузера
// Код статуса 400 Сервер не может понять и обработать запрос из-за ошибки клиента
// Код статуса 401 Запрос кода статуса возникает, когда требуется проверка подлинности, но она не была предоставлена
// Статус-код 403 Происходит, когда действительный запрос был отправлен, но сервер отказывается
// принять его
// Статус-код 404 Код состояния 404 возникает, когда запрос действителен, но ресурс не может быть
// найден на сервере
// Статус-код 409 Код статуса 409 отправляется при конфликте запроса с текущим состоянием ресурса
// Код статуса 410 Запрошенный ресурс больше недоступен и не будет доступен снова
// Статус код 500 Происходит, когда сервер не может выполнить запрос из-за неожиданной проблемы

// Fetch API —
// предоставляет интерфейс JavaScript для работы с
// запросами и ответами HTTP. Он также
// предоставляет глобальный метод fetch(), который
// позволяет легко и логично получать ресурсы по
// сети асинхронно.

// const p1 = new Promise(res => res('hello world'))
// console.log(p1)
// p1.then(res => console.log(res))

// fetch -> response object.then() -> promise.then() -> realniy otvet
// fetch('https://jsonplaceholder.typicode.com/todos/1')
//   .then(res => res.json())
//   .then(data => console.log(data))

// fetch('https://jsonplaceholder.typicode.com/todos', {
//   method: 'POST',
//   headers: { 'Content-Type': 'application/json' },
//   body: JSON.stringify({
//     title: 'HELLO VLADIMIR',
//     completed: true,
//   }),
// })
//   .then(res => res.json())
//   .then(res => console.log(res))

// async function fetchFn() {
//   const res = await fetch('https://jsonplaceholder.typicode.com/todos')
//   const data = await res.json()
//   console.log(data)
// }
// fetchFn()

// Используя fetch сделать запрос на https://jsonplaceholder.typicode.com/todos и после получения ответа вывести все id туду в консоль.

fetch('https://jsonplaceholder.typicode.com/todos')
  .then(res => res.json())
  .then(res =>
    res.forEach(element => {
      console.log(element)
    })
  )
