// 1. Создайте функцию, которая возвращает промис, сразу же разрешаемый со значением "Hello, World!", используя Promise.resolve. Вызовите эту функцию и выведите результат в консоль.

// 2. Создайте функцию, которая возвращает промис, сразу же отклоняемый с сообщением об ошибке "Error: Something went wrong", используя Promise.reject. Вызовите эту функцию и обработайте ошибку с помощью catch, выводя сообщение об ошибке в консоль.

// 3. Напишите функцию, которая принимает число и возвращает промис, который разрешается с удвоенным значением числа через 1 секунду. Затем создайте цепочку промисов, где вы сначала удваиваете число, затем еще раз, а потом еще раз, выводя финальное значение в консоль.



// 4. У вас есть три функции, которые возвращают промисы, каждая из которых разрешается через разное время:

// fetchUserData — разрешается через 2 секунды с данными пользователя.
// fetchPosts — разрешается через 1 секунду с данными постов.
// fetchComments — разрешается через 3 секунды с данными комментариев.
// Используйте Promise.all, чтобы дождаться завершения всех трех функций, и затем выведите в консоль все данные разом.

// 5. Создайте три промиса, которые разрешаются через разные временные интервалы (например, 2, 4 и 6 секунд) с разными значениями. Используйте Promise.race, чтобы вывести результат самого быстрого промиса в консоль.

// 6. Создайте три промиса:
// Первый отклоняется через 1 секунду.
// Второй отклоняется через 2 секунды.
// Третий разрешается через 3 секунды с сообщением "Success!".
// Используйте Promise.any, чтобы вывести результат первого успешно завершившегося промиса. Обработайте ситуацию, если все промисы были отклонены.


// 7. Создайте функцию, которая возвращает промис, разрешающийся через 5 секунд с сообщением "Completed". Создайте другой промис, который отклоняется через 3 секунды с сообщением "Timeout". Используйте Promise.race между этими двумя промисами, чтобы в случае превышения 3 секунд получить сообщение о тайм-ауте.

// 8. Создайте массив из нескольких промисов, один из которых отклоняется, а остальные разрешаются с разными значениями. Используйте Promise.all и обработайте ошибку, выводя сообщение о том, что один из промисов отклонился. Выведите также все разрешенные значения, если ошибки не было.

// 9. Напишите функцию fetchDataWithRetry, которая принимает другую функцию fetchData и количество попыток retries. Функция fetchDataWithRetry должна пытаться вызвать fetchData и, если она отклоняется, пытаться снова до тех пор, пока не исчерпает количество попыток retries. Если все попытки провалены, промис должен быть окончательно отклонен.

// 10. Создайте массив из пяти URL-адресов (можно использовать фиктивные адреса). Напишите функцию, которая обходит этот массив с помощью map и создает промис для каждого URL-адреса, имитируя запрос с задержкой (например, с помощью setTimeout). Используйте Promise.all, чтобы дождаться завершения всех "запросов" и вывести результаты в консоль.

